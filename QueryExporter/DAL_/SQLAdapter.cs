using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QueryExporter.DAL_
{
    /// <summary>
    /// Provides methods for executing SQL commands against a database using ADO.NET.
    /// </summary>
    internal class SQLAdapter
    {
        private readonly string _connectionString;

        /// <summary>
        /// Initialises a new instance of the SQLAdapter class.
        /// </summary>
        /// <param name="connectionString">The connection string to the database.</param>
        public SQLAdapter(string connectionString)
        {
            _connectionString = connectionString;
        }

        /// <summary>
        /// Executes a SQL query and returns the results as a DataSet.
        /// </summary>
        /// <param name="command">The SqlCommand to execute.</param>
        /// <returns>A DataSet containing the result set generated by the command.</returns>
        public DataSet ExecuteQuery(SqlCommand command)
        {
            DataSet dataSet = new DataSet();
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                command.Connection = connection; // Set the connection to the SqlCommand

                try
                {
                    connection.Open();
                    using (SqlDataAdapter adapter = new SqlDataAdapter(command))
                    {
                        adapter.Fill(dataSet);
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"An error occurred: {ex.Message}");
                    throw; // Re-throwing the exception to be handled by the calling code
                }
            }
            return dataSet;
        }

        /// <summary>
        /// Executes a SQL command that does not return any result set (e.g., INSERT, UPDATE, DELETE).
        /// </summary>
        /// <param name="query">The SQL query to execute.</param>
        /// <param name="parameters">The parameters to include in the SQL command.</param>
        /// <returns>The number of rows affected by the command.</returns>
        public int ExecuteNonQuery(string query, SqlParameter[] parameters)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                try
                {
                    connection.Open();
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        if (parameters != null)
                        {
                            command.Parameters.AddRange(parameters);
                        }
                        return command.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"An error occurred: {ex.Message}");
                    throw;
                }
            }
        }

        /// <summary>
        /// Executes a SQL command that does not return any result set (e.g., INSERT, UPDATE, DELETE).
        /// </summary>
        /// <param name="query">The SQL query to execute.</param>
        /// <returns>The number of rows affected by the command.</returns>
        public int ExecuteNonQuery(string query)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                try
                {
                    connection.Open();
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        return command.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"An error occurred: {ex.Message}");
                    throw;
                }
            }
        }

        /// <summary>
        /// Executes a SQL command that returns a single value (e.g., scalar).
        /// </summary>
        /// <param name="query">The SQL query to execute.</param>
        /// <param name="parameters">The parameters to include in the SQL command.</param>
        /// <returns>The value returned by the command.</returns>
        public object ExecuteScalar(string query, SqlParameter[] parameters)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                try
                {
                    connection.Open();
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        if (parameters != null)
                        {
                            command.Parameters.AddRange(parameters);
                        }
                        return command.ExecuteScalar();
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"An error occurred: {ex.Message}");
                    throw;
                }
            }
        }

        /// <summary>
        /// Executes a SQL command that returns a SqlDataReader.
        /// </summary>
        /// <param name="command">The SqlCommand to execute.</param>
        /// <returns>A SqlDataReader containing the result set generated by the command.</returns>
        public SqlDataReader ExecuteReader(SqlCommand command)
        {
            SqlConnection connection = new SqlConnection(_connectionString);
            command.Connection = connection;

            try
            {
                connection.Open();
                return command.ExecuteReader(CommandBehavior.CloseConnection);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"An error occurred: {ex.Message}");
                connection.Close();
                throw;
            }
        }

    }
}
